name: Build/release

on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:    
      - 'ci/**'
      - 'releases/**'
      - 'dev'
      - 'master'
    tags:        
      - v0.*.*
      - v1.*.*
  # release:
  #   # Only use the types keyword to narrow down the activity types that will trigger your workflow.
  #   types: [published, created, edited]

jobs:
  build-linux:
    runs-on: ${{ matrix.os }}
    
    env:
      RELEASE_OS_NAME: linux

    strategy:
      matrix:
        os: [ubuntu-16.04]
        target_arch: [amd64, i386, arm, arm64, mips, mips64]
        build_type: [release, debug]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Build on Docker
        shell: bash
        run: |
          echo "start docker build..."
          DIR=`pwd`; docker run -t --env GIT_BRANCH=${GITHUB_REF} -v ${DIR}:/home/ci fibjs/build-env:clang /bin/sh -c "cd /home/ci; sh build -j7 ${TARGET_ARCH} ${BUILD_TYPE} ci"
        env:
          TARGET_ARCH: ${{ matrix.target_arch }}
          BUILD_TYPE: ${{ matrix.build_type }}

      - name: Package
        id: package
        shell: bash
        run: |
          export GIT_COMMIT_HEAD_MSG=$(git log --format=%b -1)
          echo "::set-output name=GIT_COMMIT_HEAD_MSG::$GIT_COMMIT_HEAD_MSG"
          export GIT_COMMIT_SHORTCUTS=$(git log --format=%h -1)
          echo "::set-output name=GIT_COMMIT_SHORTCUTS::$GIT_COMMIT_SHORTCUTS"
          export GIT_COMMIT_TIME=$(git show -s --format="%cd" --date=format:%Y%m%d%H%M%S HEAD)
          echo "::set-output name=GIT_COMMIT_TIME::$GIT_COMMIT_TIME"
          export RELEASE_TAG=$(echo "$GIT_COMMIT_TIME-$GIT_COMMIT_SHORTCUTS")
          echo "::set-output name=RELEASE_TAG::$RELEASE_TAG"
          sh .github/workflows/pack.sh
          echo "::set-output name=DIST_FILE::$DIST_FILE"
        env:
          TARGET_ARCH: ${{ matrix.target_arch }}
          BUILD_TYPE: ${{ matrix.build_type }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.package.outputs.RELEASE_TAG }}
          release_name: Release ${{ steps.package.outputs.RELEASE_TAG }}
          body: ${{ steps.package.outputs.GIT_COMMIT_HEAD_MSG }}
          draft: false
          prerelease: true
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_name: ${{ steps.package.outputs.DIST_FILE }}
          asset_path: ./.dist/bin/${{ steps.package.outputs.DIST_FILE }}
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_content_type: application/zip
